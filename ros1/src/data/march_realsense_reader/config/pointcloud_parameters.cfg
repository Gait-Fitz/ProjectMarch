#!/usr/bin/env python
PACKAGE = "march_realsense_reader"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
# A dynamic reconfigurable parameter can be added by:
#   gen.add(str: param_name, type, level, str: description, value, lower_bound, upper_bound)
#   More info, see: http://wiki.ros.org/dynamic_reconfigure/Tutorials/HowToWriteYourFirstCfgFile


#  Preprocessor parameters
preprocessor = gen.add_group("Preprocessor", type="collapse", state=True)
downsampling = preprocessor.add_group("Downsampling")
downsampling.add("preprocessor_downsampling_voxel_grid_filter",
        bool_t, 0, "Downsampling by averaging over a grid", False)
downsampling.add("preprocessor_downsampling_leaf_size",
        double_t, 0, "Size of the grid (voxel grid filter)", .05, 0.001,   1)
downsampling.add("preprocessor_downsampling_random_filter",
        bool_t,    0, "Donwsampling by selecting random points",  True)
downsampling.add("preprocessor_downsampling_remainig_points",
        int_t, 0, "Remaining points after downsampling",  5000, 1000, 10000)

normal_estimation = preprocessor.add_group("Normal Estimation")
normal_estimation.add("preprocessor_normal_estimation_use_tree_search_method",
        bool_t, 0, "Use nearest neighbours method", True)
normal_estimation.add("preprocessor_normal_estimation_number_of_neighbours",
        int_t, 0, "", 9, 2,   50)
normal_estimation.add("preprocessor_normal_estimation_search_radius",
        double_t, 0, "Use every point within a certain radius", 0.03, 0.01, 0.15)

preprocessor.add("preprocessor_maximum_distance_threshold",
        double_t, 0, "Points beyond this threshold are discarded", 1.5, 0.5, 5.0)
preprocessor.add("preprocessor_minimum_distance_threshold_x",
        double_t, 0, "Points before this threshold are discarded", 0.5, 0.0, 1.0)
preprocessor.add("preprocessor_minimum_distance_threshold_y",
        double_t, 0, "Points before this threshold are discarded", 0.2, 0.0, 1.0)
preprocessor.add("preprocessor_minimum_distance_threshold_z",
        double_t, 0, "Points before this threshold are discarded", 0.5, 0.0, 1.0)

normal_filter = preprocessor.add_group("Normal Filter")
normal_filter.add("preprocessor_normal_filter_allowed_length_x",
        double_t, 0, "Allowed normal vector length in direction x", 0.5, 0.0, 1.0)
normal_filter.add("preprocessor_normal_filter_allowed_length_y",
        double_t, 0, "Allowed normal vector length in direction y", 0.4, 0.0, 1.0)
normal_filter.add("preprocessor_normal_filter_allowed_length_z",
        double_t, 0, "Allowed normal vector length in direction z", 1.0, 0.0, 1.0)

# Region Creator parameters
region_creator = gen.add_group("Region Creator", type="collapse", state=True)
region_creator.add("region_creator_region_growing_number_of_neighbours",
        int_t, 0, "Number of neighbours for the Region growing algorithm", 10, 2, 100)
region_creator.add("region_creator_region_growing_number_of_neighbours_no_seeds",
        int_t, 0, "Number of neighbours for the Region growing algorithm", 50, 2, 100)
region_creator.add("region_creator_region_growing_min_valid_cluster_size",
        int_t, 0, "Minimal points per region", 4, 3, 500)
region_creator.add("region_creator_region_growing_max_valid_cluster_size",
        int_t, 0, "Maximum points per region", 100000, 10, 100000000)
region_creator.add("region_creator_region_growing_min_desired_cluster_size",
        int_t, 0, "Minimal points per region", 20, 3, 500)
region_creator.add("region_creator_region_growing_max_desired_cluster_size",
        int_t, 0, "Maximum points per region", 70, 10, 10000)
region_creator.add("region_creator_region_growing_smoothness_threshold",
        double_t, 0, "Whether a point should be added to a region", 0.368, 0.00, 1.6)
region_creator.add("region_creator_region_growing_smoothness_threshold_lower_bound",
        double_t, 0, "Whether a point should be added to a region", 0.06, 0.00, 1.6)
region_creator.add("region_creator_region_growing_smoothness_threshold_upper_bound",
        double_t, 0, "Whether a point should be added to a region", 1.5, 0.00, 1.6)
region_creator.add("region_creator_region_growing_curvature_threshold",
        double_t, 0, "Whether point becomes a seed, based on the curvature", 2.5, -0.1,
                   10.0)
region_creator.add("region_creator_region_growing_use_recursive_growing",
        bool_t, 0, "Whether to use recursive region growing or default region growing", False)
region_creator.add("region_creator_region_growing_tolerance_change_factor_increase",
        double_t, 0, "The factor by which the tolerance is increased each recursive call", 1.05, 1.0, 2.0)
region_creator.add("region_creator_region_growing_tolerance_change_factor_decrease",
        double_t, 0, "The factor by which the tolerance is decreased each recursive call", 0.9, 0.0, 1.0)
region_creator.add("region_creator_region_growing_use_no_seed_growing",
        bool_t, 0, "Whether to use no seed growing for the ramp", False)

# Hull Finder parameters
hull_finder = gen.add_group("Hull Finder", type="collapse", state=True)
hull_finder.add("hull_finder_convex",
        bool_t, 0, "Whether to find convex hulls, if false find concave hulls", False)
hull_finder.add("hull_finder_alpha",
        double_t, 0, "Maximum length from a vertex to the facet center", 0.5, 0.01, 1.0)
hull_finder.add("hull_dimension",
        int_t, 0, "2D or 3D hull", 2, 2, 3)
hull_finder.add("hull_finder_output_plane_information",
        bool_t, 0, "Whether to output the plane parameters of each hull or not", False)

# Parameter Determiner parameters
parameter_determiner = gen.add_group("Parameter Determiner", type="collapse", state=False)
ramp_group = parameter_determiner.add_group("Ramp")
stairs_group = parameter_determiner.add_group("Stairs")
sit_group = parameter_determiner.add_group("Sit")
foot_group = parameter_determiner.add_group("Foot Location")
foot_constraints_group = parameter_determiner.add_group("Foot Location Constraints")

foot_group.add("parameter_determiner_foot_locations",
        int_t, 0, "Number of foot locations to consider", 30, 2, 50)

foot_constraints_group.add("parameter_determiner_max_allowed_z_deviation_foot",
        double_t, 0, " ", 0.03, 0.0001, 0.2)

foot_constraints_group.add("parameter_determiner_foot_length_back",
        double_t, 0, "The length from the ankle to the back of the foot", 0.05, 0, 0.15)
foot_constraints_group.add("parameter_determiner_foot_length_front",
        double_t, 0, "The length from the ankle to the front of the foot", 0.1, 0.0, 0.2)
foot_constraints_group.add("parameter_determiner_foot_width",
        double_t, 0, "The width of the foot", 0.05, 0.0, 0.15)

# Gait dimension parameters for the parameter determiner. The height is calculated to be the height from the obstacle
# to the midpoint of the foot block. For the ramp the x and z are calculated by finding the x and y change from the
# midpoint of the stable foot to the contact point of the swing foot. All these parameters are for the opening subgait.

stairs_group.add("parameter_determiner_stairs_up_locations_min_x",
                 double_t, 0, "The minimal depth of a stair the stairs gait can reach", -0.32, -1, 1)
stairs_group.add("parameter_determiner_stairs_up_locations_max_x",
                 double_t, 0, "The maximum depth of a stair the stairs gait can reach", -0.57, -1, 1)
stairs_group.add("parameter_determiner_stairs_up_locations_min_z",
                 double_t, 0, "The minimal height of a stair the stairs gait can reach", 0.12, -1, 1)
stairs_group.add("parameter_determiner_stairs_up_locations_max_z",
                 double_t, 0, "The maximum height of a stair the stairs gait can reach", 0.22, -1, 1)
stairs_group.add("parameter_determiner_most_desirable_loc_is_mid",
                 bool_t, 0, "The optimal foot location is in the middle of the reachable locations", True)
stairs_group.add("parameter_determiner_most_desirable_loc_is_small",
                 bool_t, 0, "The optimal foot location is in the smallest step", False)
stairs_group.add("parameter_determiner_allowed_deviation_from_reachable_stair",
               double_t, 0, "The maximum deviation from the stair dimensions allowed "
                            "where the exo should still find a parameter", 0.02, 0.0, 0.1)

ramp_group.add("parameter_determiner_ramp_min_search_area",
               double_t, 0, "Minimum area to search for foot locations", -0.4, -1.0, 0.0)
ramp_group.add("parameter_determiner_ramp_max_search_area",
               double_t, 0, "Minimum area to search for foot locations", -0.6, -1.0, 0.0)

ramp_group.add("parameter_determiner_max_slope",
               double_t, 0, "The maximum walkable slope in degrees", 20, 10, 20)
ramp_group.add("parameter_determiner_min_slope",
               double_t, 0, "The minimum walkable slope in degrees", 5, 0, 10)

ramp_group.add("parameter_determiner_allowed_deviation_from_reachable_ramp",
              double_t, 0, "The maximum deviation from the ramp slope allowed where "
                           "the exo should still find a parameter", 1.0, 0.0, 4.0)

sit_group.add("parameter_determiner_min_sit_height",
              double_t, 0, " ", 0.35, 0.0, 1.0)
sit_group.add("parameter_determiner_max_sit_height",
              double_t, 0, " ", 0.55, 0.0, 1.0)
sit_group.add("parameter_determiner_allowed_deviation_from_reachable_bench",
              double_t, 0, "The maximum deviation from the sit height allowed where "
                           "the exo should still find a parameter", 0.03, 0.0, 0.1)
sit_group.add("parameter_determiner_min_x_search_sit",
              double_t, 0, " ", 0.2, 0.0, 1.0)
sit_group.add("parameter_determiner_max_x_search_sit",
              double_t, 0, " ", 0.35, 0.0, 1.0)
sit_group.add("parameter_determiner_search_y_deviation_sit",
              double_t, 0, " ", 0.15, 0.0, 1.0)
sit_group.add("parameter_determiner_sit_grid_size",
              double_t, 0, " ", 0.05, 0.0001, 0.2)
sit_group.add("parameter_determiner_minimal_needed_support_sit",
              double_t, 0, "The minimal fraction of points that need to provide exo "
                           "support in the search grid", 0.2, 0.0, 1.0)

# The current value for this is in the middle before exoskeleton, we chose this
# since the view was not good before the foot, long term best solution would be
# to look in front of the foot for every step
# (determined as hip_base/2 + hip_aa_side - ankle_offset - lower_leg_offset = 0.123)
# This parameter is somewhat larger as in stand position the hip aa is at 2 degrees
# This parameter is tuned for the right foot.
foot_group.add("parameter_determiner_y_deviation_right_foot",
        double_t, 0, "The amount of y deviation for the right foot in the steps", -0.128,
              -1, 1)

# Debug
# WARNING: If the debug parameter was false at launch, enabling it with dynamic reconfigure will not enable debugging.
gen.add("debug",
        bool_t, 0, "If true, will publish several messages of intermediate steps. "
                   "Do not enable, if launch argument is false", True)

gen.add("publish_hull_area_debug",
        bool_t, 0, "If true, will publish extra information on the area's of the hulls,"
                   " can be slow to compute. ", False)

exit(gen.generate(PACKAGE, "march_realsense_reader", "pointcloud_parameters"))