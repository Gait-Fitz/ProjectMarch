#!/usr/bin/env python
PACKAGE = "march_realsense_reader"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
# A dynamic reconfigurable parameter can be added by:
#   gen.add(str: param_name, type, str: description, value, lower_bound, upper_bound)
#   More info, see: http://wiki.ros.org/dynamic_reconfigure/Tutorials/HowToWriteYourFirstCfgFile


#  Preprocessor parameters
gen.add("preprocessor_downsampling_voxel_grid_filter",
        bool_t, 0, "Downsampling by averaging over a grid", False)
gen.add("preprocessor_downsampling_leaf_size",
        double_t, 0, "Size of the grid (voxel grid filter)", .05, 0.001,   1)
gen.add("preprocessor_downsampling_random_filter",
        bool_t,    0, "Donwsampling by selecting random points",  True)
gen.add("preprocessor_downsampling_remainig_points",
        int_t, 0, "Remaining points after downsampling",  5000, 1000, 10000)

gen.add("preprocessor_normal_estimation_use_tree_search_method",
        bool_t, 0, "Use nearest neighbours method", True)
gen.add("preprocessor_normal_estimation_number_of_neighbours",
        int_t, 0, "", 9, 2,   50)
gen.add("preprocessor_normal_estimation_search_radius",
        double_t, 0, "Use every point within a certain radius", 0.03, 0.01, 0.15)

gen.add("preprocessor_distance_filter_threshold",
        double_t, 0, "Points beyond this threshold are discarded", 3.0, 0.5, 5.0)

gen.add("preprocessor_normal_filter_allowed_length_x",
        double_t, 0, "Allowed normal vector length in direction x", 0.5, 0.0, 1.0)
gen.add("preprocessor_normal_filter_allowed_length_y",
        double_t, 0, "Allowed normal vector length in direction y", 0.4, 0.0, 1.0)
gen.add("preprocessor_normal_filter_allowed_length_z",
        double_t, 0, "Allowed normal vector length in direction z", 1.0, 0.0, 1.0)

# Region Creator parameters
gen.add("region_creator_region_growing_number_of_neighbours",
        int_t, 0, "Number of neighbours for the Region growing algorithm", 10, 2, 100)
gen.add("region_creator_region_growing_min_cluster_size",
        int_t, 0, "Minimal points per region", 10, 2, 500)
gen.add("region_creator_region_growing_max_cluster_size",
        int_t, 0, "Maximum points per region", 100000, 10, 10000)
gen.add("region_creator_region_growing_smoothness_threshold",
        double_t, 0, "Whether a point should be added to a region", 0.0689, 0.00, 1.6)
gen.add("region_creator_region_growing_curvature_threshold",
        double_t, 0, "Whether point becomes a seed, based on the curvature", 0.5, 0.1, 10.0)

# Hull Finder parameters
gen.add("hull_finder_convex",
        bool_t, 0, "Whether to find convex or concave hulls", True)
gen.add("hull_finder_alpha",
        double_t, 0, "Maximum length from a vertex to the facet center", 0.5, 0.01, 1.0)
gen.add("hull_dimension",
        int_t, 0, "2D or 3D hull", 2, 2, 3)

# Parameter Determiner parameters
gen.add("parameter_determiner_foot_locations", int_t, 0, "Number of foot locations to consider", 10, 1, 20)

gen.add("parameter_determiner_stairs_locations_min_x",
        double_t, 0, "The minimal depth of a stair the stairs gait can reach", -0.2, -1, 1)
gen.add("parameter_determiner_stairs_locations_max_x",
        double_t, 0, "The maximum depth of a stair the stairs gait can reach", -0.4, -1, 1)
gen.add("parameter_determiner_stairs_locations_min_z",
        double_t, 0, "The minimal height of a stair the stairs gait can reach", 0.1, -1, 1)
gen.add("parameter_determiner_stairs_locations_max_z",
        double_t, 0, "The maximum height of a stair the stairs gait can reach", 0.3, -1, 1)

gen.add("parameter_determiner_most_desirable_loc_is_mid",
        bool_t, 0, "The optimal foot location is in the middle of the reachable locations", True)
gen.add("parameter_determiner_most_desirable_loc_is_small",
        bool_t, 0, "The optimal foot location is in the smallest step", False)

gen.add("parameter_determiner_ramp_max_search_area",
        double_t, 0, "Maximum area to search for foot locations", -0.6, -2.0, 0.0)
gen.add("parameter_determiner_ramp_min_search_area",
        double_t, 0, "Minimum area to search for foot locations", -0.0, -1.0, 0.0)

gen.add("parameter_determiner_ramp_max_distance_to_line",
        double_t, 0, "Maximum distance to line", 0.05, 0.0, 1.0)

gen.add("parameter_determiner_ramp_x_flat",
        double_t, 0, " ", -0.4, 0.0, -1.0)
gen.add("parameter_determiner_ramp_z_flat",
        double_t, 0, " ", -0.05, 0.0, -1.0)
gen.add("parameter_determiner_ramp_x_steep",
        double_t, 0, " ", -0.2, 0.0, -1.0)
gen.add("parameter_determiner_ramp_z_steep",
        double_t, 0, " ", -0.2, 0.0, -1.0)
gen.add("parameter_determiner_ramp_y_location",
        double_t, 0, " ", 0.0, 0.0, -1.0)
gen.add("parameter_determiner_max_allowed_z_deviation_foot",
        double_t, 0, " ", 0.03, 0.0001, 0.2)

gen.add("parameter_determiner_foot_length_back",
        double_t, 0, "The length from the ankle to the back of the foot", 0.05, 0, 0.15)
gen.add("parameter_determiner_foot_length_front",
        double_t, 0, "The length from the ankle to the front of the foot", 0.1, 0.0, 0.2)
gen.add("parameter_determiner_foot_width",
        double_t, 0, "The width of the foot", 0.05, 0.0, 0.15)

# Debug
# WARNING: If the debug parameter was false at launch, enabling it with dynamic reconfigure will not enabling debugging.
gen.add("debug",
        bool_t, 0, "If true, will publish several messages of intermediate steps. "
                   "Do not enable, if launch argument is false", True)

exit(gen.generate(PACKAGE, "march_realsense_reader", "pointcloud_parameters"))