# Before you change anything in this file, it is highly recommended to read the
# reference on https://docs.gitlab.com/ee/ci/yaml/ and related pages. This file
# won't make much sense without those pages.

variables:
  # Define how submodules are handled. See https://docs.gitlab.com/ee/ci/runners/README.html#git-submodule-strategy
  GIT_SUBMODULE_STRATEGY: recursive

# The different stages of the pipeline. They will occur in this order.
# See https://docs.gitlab.com/ee/ci/yaml/README.html#stages for more explaination
# on how this should be interpreted.
stages:
  - Build container
  - Lint code
  - Build code
  - Test code
  - Static analysis on code

# GitLab defines different job types, depending on how the job is scheduled.
# Right now, we use two types: 1) branches, 2) merge_requests
# and 3) scheduled pipelines
#
# 1) Branches
# Pipelines labeled "branches" are executed on the latest commit of a branch. All
# jobs that are scheduled conditionally based on the file changes in the
# latest commit (the "rules" keyword,
# see https://docs.gitlab.com/ee/ci/yaml/README.html#ruleschanges)
#
# 2) Merge requests
# Pipelines labeled "merge_requests" are executed when commits are pushed to a
# merge request. This pipeline runs on the difference between the target branch
# and the source branch. The "rules" keywords covers ALL changes that differ
# between the two branches.
#
# 3) Scheduled pipelines
# Pipelines labeled "schedule" are executed on certain times of the day, as defined
# on GitLab. These are the same as branch pipelines but then they are executed based
# on the time of the day, instead of when a new commit has been pushed.
#
# In short: branches        = only latest commit, but when a new commit is pushed
#           merge_requests  = all commits in in merge request
#           schedule        = only latest commit, but when a predefined time of day is reached
#
# An overview of all the different types can be
# found on https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
# under the variable "CI_PIPELINE_SOURCE".
#
# You will see these three types in almost any job definition.
# To make the main .gitlab-ci.yml file easier to follow, the actual job definitions
# are split into different files. Each file specifies the jobs of a stage.
include:
    #    - local: /.gitlab/pipeline/build-container.yml
    - local: /.gitlab/pipeline/lint-code.yml
    - local: /.gitlab/pipeline/build-code.yml


###################
# Test code stage #
###################
# Run the tests, both for noetic and foxy. These stages are separated because they
# are not dependent on eachother. This enables extra parallelization.
.base_tester:
  stage: Test code
  script:
    - cd $ROS_VERSION/
    - source /opt/ros/$ROS_CODENAME/local_setup.bash && source install/local_setup.bash && colcon test --event-handlers console_direct+
    - colcon test-result --verbose

noetic:test:
  dependencies:
    - noetic:build
  needs: ["noetic:build"]
  extends:
    - .only_on_ros1_changes
    - .base_tester

foxy:test:
  dependencies:
    - foxy:build
  needs: ["foxy:build"]
  extends:
    - .only_on_ros2_changes
    - .base_tester

#######################
# C++ static analysis #
#######################
# Run C++ static analysis. This is dependent on the `compile_commands.json` file that is
# produced by the build stage. This runs when a C++ file has been changed or if the
# static analysis configuration has changed. Currently, only clang-tidy is executed in
# this stage. More information on clang-tidy can be found on https://clang.llvm.org/extra/clang-tidy/
.clang_tidy_base:
  stage: Static analysis on code
  image: $CI_REGISTRY_IMAGE/$ROS_CODENAME:$TAG
  script:
    - cd $ROS_VERSION/
    # Find all C and C++ related files, filter all files that are not part of the march code
    # and run clang-tidy on the files
    - find src -name '*.hpp' -or -name '*.h' -or -name '*.cpp' -or -name "*.c" | grep -v "src/libraries" | grep -v "xsens" | xargs -L1 -P$(getconf _NPROCESSORS_ONLN) -I{} -- clang-tidy -p build {} 2> /dev/null
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_COMMIT_BRANCH
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH'
      changes:
        - "$ROS_VERSION/**/*.{hpp,h,cpp,c}"
        - "$ROS_VERSION/**/CMakeLists.txt"
        - ".clang-tidy"
      variables:
        TAG: $CI_DEFAULT_BRANCH

noetic:clang-tidy:
  variables:
    ROS_VERSION: "ros1"
    ROS_CODENAME: "noetic"
    DOCKER_FILE: $ROS1_DOCKERFILE
  dependencies:
    - noetic:build
  needs: ["noetic:build"]
  extends:
    - .clang_tidy_base

foxy:clang-tidy:
  variables:
    ROS_VERSION: "ros2"
    ROS_CODENAME: "foxy"
    DOCKER_FILE: $ROS2_DOCKERFILE
  dependencies:
    - foxy:build
  needs: ["foxy:build"]
  extends:
    - .clang_tidy_base
