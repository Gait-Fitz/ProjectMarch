# Before you change anything in this file, it is highly recommended to read the
# reference on https://docs.gitlab.com/ee/ci/yaml/ and related pages. This file
# won't make much sense without those pages.

variables:
  # Define how submodules are handled. See https://docs.gitlab.com/ee/ci/runners/README.html#git-submodule-strategy
  GIT_SUBMODULE_STRATEGY: recursive
  CLANG_FORMAT_DOCKERFILE: ".gitlab/images/Dockerfile_clang_format"

# The different stages of the pipeline. They will occur in this order.
# See https://docs.gitlab.com/ee/ci/yaml/README.html#stages for more explaination
# on how this should be interpreted.
stages:
  - Build container
  - Lint code
  - Build code
  - Test code
  - Static analysis on code

# GitLab defines different job types, depending on how the job is scheduled.
# Right now, we use two types: 1) branches, 2) merge_requests
# and 3) scheduled pipelines
#
# 1) Branches
# Pipelines labeled "branches" are executed on the latest commit of a branch. All
# jobs that are scheduled conditionally based on the file changes in the
# latest commit (the "rules" keyword,
# see https://docs.gitlab.com/ee/ci/yaml/README.html#ruleschanges)
#
# 2) Merge requests
# Pipelines labeled "merge_requests" are executed when commits are pushed to a
# merge request. This pipeline runs on the difference between the target branch
# and the source branch. The "rules" keywords covers ALL changes that differ
# between the two branches.
#
# 3) Scheduled pipelines
# Pipelines labeled "schedule" are executed on certain times of the day, as defined
# on GitLab. These are the same as branch pipelines but then they are executed based
# on the time of the day, instead of when a new commit has been pushed.
#
# In short: branches        = only latest commit, but when a new commit is pushed
#           merge_requests  = all commits in in merge request
#           schedule        = only latest commit, but when a predefined time of day is reached
#
# An overview of all the different types can be
# found on https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
# under the variable "CI_PIPELINE_SOURCE".

include:
    - local: /.gitlab/pipeline/build-container.yml

#################
# flake8 linter #
#################
# Runs a Python linter on the code to see if the code style is consistent and
# to avoid common mistakes
flake8:
  stage: Lint code
  image: $CI_REGISTRY_IMAGE/flake8:$TAG
  variables:
      DOCKER_FILE: $FLAKE8_DOCKERFILE
  script:
    # Return the return value of the rightmost failed command. It is unlikely that `sed` fails, but
    # the if the flake8 runner fails then everything is propagated through. This means that the
    # return value of the whole pipe sequence will be the same as the return value of
    # the flake8 command.
    - set -o pipefail
    # The codeclimate format returns violations on new lines, but GitLab expects a json
    # array. This adds the required "[", "]" and ","s for the file to be interpreted as
    # a valid JSON array.
    - python3 -m flake8 --format=codeclimate --config .flake8 | sed '1s;^;[;' | sed 's/$/,/g' | sed '$ s/.$//' | sed '$ a ]' | tee codeclimate.json
    # If the above statement succeeds, then codeclimate.json will be empty. We add an empty
    # array to ensure that the codeclimate.json file still has a valid json syntax
    - echo "[]" | tee codeclimate.json
  artifacts:
    reports:
      codequality: codeclimate.json
  needs:
    - job: "flake8 container build"
      optional: true
  rules:
    # These rules are here to select a different Docker image depending on the
    # running conditions. The statements are evaluated from top to bottom until a rule
    # is matched.
    # They can be interpreted as:
    #   1. Run if the pipeline is a MR and the Dockerfile has changed with the image
    #      created from the changed Dockerfile.
    #   2. Don't run if the pipeline is both a branch and in a merge request
    #      This is to avoid duplicate pipelines where both a MR pipeline and a branch pipeline
    #      is scheduled.
    #   3. Run if the pipline is for a branch without a MR and the Dockerfile has changed
    #      with the image created from the changed Dockerfile.
    #   4. In all other cases, if a flake8 or Python related file has changed run with
    #      the image from the Dockerfile in `main`.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_COMMIT_BRANCH
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH'
      changes:
        - ".flake8"
        - "**/*.py"
      variables:
        TAG: $CI_DEFAULT_BRANCH

#######################
# clang-format linter #
#######################
# Check if the C++ code is consistent in code formatting (correct amount of tabs/spaces,
# correct indentation etc.)
clang-format:
  stage: Lint code
  image: $CI_REGISTRY_IMAGE/clang_format:$TAG
  variables:
      DOCKER_FILE: $CLANG_FORMAT_DOCKERFILE
  script:
    - run-clang-format.py -r ros1/src ros2/src --style=file
  needs:
    - job: "clang_format container build"
      optional: true
  rules:
    # These rules are here to select a different Docker image depending on the
    # running conditions. The statements are evaluated from top to bottom until a rule
    # is matched.
    # They can be interpreted as:
    #   1. Run if the pipeline is a MR and the Dockerfile has changed with the image
    #      created from the changed Dockerfile.
    #   2. Don't run if the pipeline is both a branch and in a merge request
    #      This is to avoid duplicate pipelines where both a MR pipeline and a branch pipeline
    #      is scheduled.
    #   3. Run if the pipline is for a branch without a MR and the Dockerfile has changed
    #      with the image created from the changed Dockerfile.
    #   4. In all other cases, if a clang_format, C or C++ related file has changed run with
    #      the image from the Dockerfile in `main`.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_COMMIT_BRANCH
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH'
      changes:
        - "ros1/src/**/*.{c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx}"
        - "ros2/src/**/*.{c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx}"
        - ".clang-format"
        - ".clang-format-ignore"
      variables:
        TAG: $CI_DEFAULT_BRANCH

####################
# Build code stage #
####################
# Run the build command to see if everything compiles without errors. This is a
# separate stage for the noetic and for the foxy code, because they are not dependent
# on each other and can therefore be run in parallel.
# Besides compiling, this also produces a "compile_commands.json" file that is used
# by subsequent C++ static analysis stages.

# The following two hidden jobs are used to reduce duplication because these rules are
# almost the same for a lot of subsequent jobs. They only vary in a few ways, which is why
# some variables are introduced. The following three variables change, depending on the
# version of ROS:
#   1. ROS_VERSION, either 'ros1' or 'ros2'
#   2. ROS_CODENAME, either 'noetic' or 'foxy'
#   3. DOCKER_FILE, the path of the Dockerfile that defines the execution environment. This
#      points to a ROS1 and ROS2 specific Dockerfile
.only_on_ros_changes:
  image: $CI_REGISTRY_IMAGE/$ROS_CODENAME:$TAG
  rules:
    # These rules are here to select a different Docker image depending on the
    # running conditions. The statements are evaluated from top to bottom until a rule
    # is matched.
    # They can be interpreted as:
    #   1. Run if the pipeline is a MR and the Dockerfile has changed with the image
    #      created from the changed Dockerfile.
    #   2. Don't run if the pipeline is both a branch and in a merge request
    #      This is to avoid duplicate pipelines where both a MR pipeline and a branch pipeline
    #      is scheduled.
    #   3. Run if the pipline is for a branch without a MR and the Dockerfile has changed
    #      with the image created from the changed Dockerfile.
    #   4. In all other cases, if a ROS or clang-tidy related file has changed run with
    #      the image from the Dockerfile in `main`.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_COMMIT_BRANCH
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH'
      changes:
        - "$ROS_VERSION/**/*"
        - ".clang-tidy"
      variables:
        TAG: $CI_DEFAULT_BRANCH

# Define the values of the ROS1 and ROS2 specific instances of
# the ".only_on_ros_changes" job
.only_on_ros1_changes:
  variables:
    ROS_VERSION: "ros1"
    ROS_CODENAME: "noetic"
    DOCKER_FILE: $ROS1_DOCKERFILE
  needs:
    - job: "ROS1 container build"
      optional: true
  extends:
    - .only_on_ros_changes

.only_on_ros2_changes:
  variables:
    ROS_VERSION: "ros2"
    ROS_CODENAME: "foxy"
    DOCKER_FILE: $ROS2_DOCKERFILE
  needs:
    - job: "ROS2 container build"
      optional: true
  extends:
    - .only_on_ros_changes

# A generic ROS builder that can run either for ROS1 or ROS2, depending on the given variables
# $ROS_VERSION and $ROS_CODENAME
.base_builder:
  stage: Build code
  artifacts:
    paths:
      - $ROS_VERSION/build/
      - $ROS_VERSION/install/
      - $ROS_VERSION/log/
  script:
    - cd $ROS_VERSION/
    - source /opt/ros/$ROS_CODENAME/local_setup.bash && colcon build --cmake-args "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" --event-handlers console_direct+

# Define the two actual jobs that are created from both the ROS version specific variables AND
# the generic base builder.
noetic:build:
  extends:
    - .only_on_ros1_changes
    - .base_builder

foxy:build:
  extends:
    - .only_on_ros2_changes
    - .base_builder

###################
# Test code stage #
###################
# Run the tests, both for noetic and foxy. These stages are separated because they
# are not dependent on eachother. This enables extra parallelization.
.base_tester:
  stage: Test code
  script:
    - cd $ROS_VERSION/
    - source /opt/ros/$ROS_CODENAME/local_setup.bash && source install/local_setup.bash && colcon test --event-handlers console_direct+
    - colcon test-result --verbose

noetic:test:
  dependencies:
    - noetic:build
  needs: ["noetic:build"]
  extends:
    - .only_on_ros1_changes
    - .base_tester

foxy:test:
  dependencies:
    - foxy:build
  needs: ["foxy:build"]
  extends:
    - .only_on_ros2_changes
    - .base_tester

#######################
# C++ static analysis #
#######################
# Run C++ static analysis. This is dependent on the `compile_commands.json` file that is
# produced by the build stage. This runs when a C++ file has been changed or if the
# static analysis configuration has changed. Currently, only clang-tidy is executed in
# this stage. More information on clang-tidy can be found on https://clang.llvm.org/extra/clang-tidy/
.clang_tidy_base:
  stage: Static analysis on code
  image: $CI_REGISTRY_IMAGE/$ROS_CODENAME:$TAG
  script:
    - cd $ROS_VERSION/
    # Find all C and C++ related files, filter all files that are not part of the march code
    # and run clang-tidy on the files
    - find src -name '*.hpp' -or -name '*.h' -or -name '*.cpp' -or -name "*.c" | grep -v "src/libraries" | grep -v "xsens" | xargs -L1 -P$(getconf _NPROCESSORS_ONLN) -I{} -- clang-tidy -p build {} 2> /dev/null
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_COMMIT_BRANCH
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH'
      changes:
        - "$ROS_VERSION/**/*.{hpp,h,cpp,c}"
        - "$ROS_VERSION/**/CMakeLists.txt"
        - ".clang-tidy"
      variables:
        TAG: $CI_DEFAULT_BRANCH

noetic:clang-tidy:
  variables:
    ROS_VERSION: "ros1"
    ROS_CODENAME: "noetic"
    DOCKER_FILE: $ROS1_DOCKERFILE
  dependencies:
    - noetic:build
  needs: ["noetic:build"]
  extends:
    - .clang_tidy_base

foxy:clang-tidy:
  variables:
    ROS_VERSION: "ros2"
    ROS_CODENAME: "foxy"
    DOCKER_FILE: $ROS2_DOCKERFILE
  dependencies:
    - foxy:build
  needs: ["foxy:build"]
  extends:
    - .clang_tidy_base
