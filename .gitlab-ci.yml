# Before you change anything in this or any related file, it is highly recommended to read the
# reference on https://docs.gitlab.com/ee/ci/yaml/ and related pages. The configuration
# of the GitLab CI/CD won't make much sense without the information on those pages.

variables:
  # Define how submodules are handled. See https://docs.gitlab.com/ee/ci/runners/README.html#git-submodule-strategy
  GIT_SUBMODULE_STRATEGY: recursive

# The different stages of the pipeline. They will occur in this order.
# See https://docs.gitlab.com/ee/ci/yaml/README.html#stages for more explaination
# on how this should be interpreted.
stages:
  - Build container
  - Build documentation
  - Test documentation
  - Publish documentation
  - Lint code
  - Build code
  - Test code
  - Static analysis on code

# GitLab defines different job types, depending on how the job is scheduled.
# Right now, we use two types: 1) branches, 2) merge_requests
# and 3) scheduled pipelines
#
# 1) Branches
# Pipelines labeled "branches" are executed on the latest commit of a branch. All
# jobs that are scheduled conditionally based on the file changes in the
# latest commit (the "rules" keyword,
# see https://docs.gitlab.com/ee/ci/yaml/README.html#ruleschanges)
#
# 2) Merge requests
# Pipelines labeled "merge_requests" are executed when commits are pushed to a
# merge request. This pipeline runs on the difference between the target branch
# and the source branch. The "rules" keywords covers ALL changes that differ
# between the two branches.
#
# 3) Scheduled pipelines
# Pipelines labeled "schedule" are executed on certain times of the day, as defined
# on GitLab. These are the same as branch pipelines but then they are executed based
# on the time of the day, instead of when a new commit has been pushed.
#
# In short: branches        = only latest commit, but when a new commit is pushed
#           merge_requests  = all commits in in merge request
#           schedule        = only latest commit, but when a predefined time of day is reached
#
# An overview of all the different types can be
# found on https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
# under the variable "CI_PIPELINE_SOURCE".
#
# You will see these three types in almost any job definition.
# To make the main .gitlab-ci.yml file easier to follow, the actual job definitions
# are split into different files. Each file specifies the jobs of a stage.
include:
    - local: /.gitlab/pipeline/build-container.yml
    - local: /.gitlab/pipeline/build-test-and-publish-documentation.yml
    - local: /.gitlab/pipeline/lint-code.yml
    - local: /.gitlab/pipeline/build-code.yml
    - local: /.gitlab/pipeline/test-code.yml
    - local: /.gitlab/pipeline/static-analysis.yml
